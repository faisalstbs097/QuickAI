import React, { useState } from "react";
import { Pencil, Sparkle, Loader2 } from "lucide-react";

// The original code had unresolved external imports.
// This single-file version simulates the necessary functionality.

const WriteArticle = () => {
  // We're simulating a user and an authenticated fetch since external libraries
  // and files cannot be used in this single-file environment.
  const user = { id: "mock-user-id" };

  const articleLength = [
    { length: 800, text: "Short (500–800 word)" },
    { length: 1200, text: "Medium (800–1200 word)" },
    { length: 1600, text: "Long (1200+ word)" },
  ];

  // State for form inputs, API response, and UI feedback
  const [selectedLength, setSelectedLength] = useState(articleLength[0]);
  const [input, setInput] = useState("");
  const [generatedArticle, setGeneratedArticle] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // A mock function to simulate an API call.
  // In a real application, this would fetch data from a backend.
  const mockFetchWithAuth = (options) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        const body = JSON.parse(options.body);
        const topic = body.topic;
        const length = body.length;

        const mockArticle = `
          Title: The Future of ${topic}
          
          In an ever-evolving digital landscape, the topic of ${topic} has emerged as a focal point of innovation and discussion. As technology continues to advance at an unprecedented pace, the boundaries of what is possible are constantly being redefined. This article explores the transformative impact of ${topic} on modern society.
          
          The length of this article is approximately ${length} words.
          
          The core principles of ${topic} revolve around... (This is a placeholder article to demonstrate functionality. In a real-world application, this content would be generated by a large language model).`;

        resolve({
          ok: true,
          json: () => Promise.resolve({ article: mockArticle }),
        });
      }, 1500); // Simulate network latency
    });
  };

  const onSubmitHandler = async (e) => {
    e.preventDefault();
    if (!input) {
      setError("Please enter a topic to generate an article.");
      return;
    }

    // Reset states and show loading indicator
    setError(null);
    setLoading(true);
    setGeneratedArticle(""); // Clear previous article

    try {
      const res = await mockFetchWithAuth({
        method: "POST",
        body: JSON.stringify({
          topic: input,
          length: selectedLength.length,
        }),
      });

      // Handle non-ok responses
      if (!res.ok) {
        throw new Error(`API call failed with status: ${res.status}`);
      }

      const data = await res.json();
      setGeneratedArticle(data.article);
    } catch (err) {
      console.error(err);
      setError("Failed to generate article. Please try again.");
    } finally {
      setLoading(false); // Hide loading indicator
    }
  };

  return (
    <div className="h-[calc(100vh-64px)] w-full bg-[#F9FAFB] flex justify-center p-6">
      <form onSubmit={onSubmitHandler} className="grid grid-cols-1 md:grid-cols-2 gap-6 w-full max-w-6xl">
        {/* Left Card */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 flex flex-col">
          <h2 className="flex items-center gap-2 text-lg font-semibold text-gray-800 mb-4">
            <Sparkle size={18} className="text-blue-500" />
            Article Configuration
          </h2>

          {/* Article Topic */}
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Article Topic
          </label>
          {/* Added value and onChange handler to connect input to state */}
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="The future of artificial intelligence is..."
            className="w-full border border-gray-300 rounded-md p-2 mb-6 focus:outline-none focus:ring-2 focus:ring-blue-400"
          />

          {/* Article Length */}
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Article Length
          </label>
          <div className="mt-3 flex gap-3 flex-wrap sm:max-w-9/11">
            {articleLength.map((item, index) => (
              <span
                onClick={() => setSelectedLength(item)}
                key={index}
                className={`text-xs px-4 py-1 rounded-full border cursor-pointer
                  ${
                    selectedLength.text === item.text
                      ? "bg-blue-100 border-blue-200 text-blue-900"
                      : "bg-white border-gray-300 text-gray-700"
                  }`}
              >
                {item.text}
              </span>
            ))}
          </div>
          
          {/* Display error message if any */}
          {error && <p className="text-red-500 text-sm mt-4">{error}</p>}
          
          {/* Generate Button */}
          {/* The button is now disabled while loading */}
          <button
            type="submit"
            disabled={loading}
            className={`mt-auto w-full flex items-center justify-center gap-2 px-4 py-2 rounded-md text-white transition-all
                ${loading
                  ? "bg-gray-400 cursor-not-allowed"
                  : "bg-gradient-to-r from-blue-500 to-blue-400 hover:from-blue-600 hover:to-blue-500"
                }`}
          >
            {loading ? (
              <>
                <Loader2 size={16} className="animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <Pencil size={16} />
                Generate article
              </>
            )}
          </button>
        </div>

        {/* Right Card */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 flex flex-col items-center justify-center text-center">
          {generatedArticle ? (
            <div className="w-full h-full overflow-auto text-left">
              <p className="text-gray-800 text-sm whitespace-pre-line">{generatedArticle}</p>
            </div>
          ) : (
            <>
              {loading ? (
                <div className="flex flex-col items-center gap-2 text-gray-500">
                  <Loader2 size={40} className="animate-spin" />
                  <p className="text-sm">Generating your article...</p>
                </div>
              ) : (
                <>
                  <Pencil size={40} className="text-gray-400 mb-3" />
                  <p className="text-gray-500 text-sm">
                    Enter a topic and click “Generate article” to get started
                  </p>
                </>
              )}
            </>
          )}
        </div>
      </form>
    </div>
  );
};

export default WriteArticle;
